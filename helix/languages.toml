[[language]]
name = "rust"
file-types = ["rs"]
auto-format = true
indent = { tab-width = 4, unit = "    " }
[language-server.rust-analyzer.config.check]
command = "clippy"
[language-server.rust-analyzer.config.cargo]
allFeatures = true
[language-server.rust-analyzer.config.procMacro]
enable = true

[language-server.svelteserver]
command = "svelteserver"
args = ["--stdio"]

[[language]]
name = "svelte"
language-servers = ["svelteserver", "eslint", "emmet-ls", "tailwindcss-ls"]
auto-format = true
indent = { tab-width = 2, unit = "  " }
roots = ["package.json"]

[language-server.phpactor]
command = "phpactor"
args = ["language-server"]

[language-server.efm]
command = "efm-langserver"

[[language]]
name = "php"
auto-format = true
indent = { tab-width = 4, unit = "    " }
language-servers = [
  { name = "intelephense", only-features = [
    "format",
    "completion",
    "diagnostics",
  ] },
  { name = "phpactor", except-features = [
    "format",
    "completion",
    "diagnostics",
  ] },
  { name = "efm", only-features = [
    "diagnostics",
    "completion",
  ] },
  { name = "tailwindcss-ls" },
]

[[language]]
name = "blade"
auto-format = true
scope = "source.blade.php"
file-types = ["blade.php", "blade"]
injection-regex = "blade"
roots = ["composer.json", "index.php"]
indent = { tab-width = 4, unit = "    " }
language-servers = [
  { name = "intelephense", only-features = [
    "format",
    "completion",
    "diagnostics",
    "inlay-hints",
  ] },
  { name = "phpactor", except-features = [
    "format",
    "completion",
    "diagnostics",
  ] },
  { name = "tailwindcss-ls" },
  { name = "vscode-html-language-server" },
  { name = "emmet-ls" },
]

[language-server.tailwindcss-ls]
config = { userLanguages = { php = "html", "*.php" = "html" } }

[language-server.emmet-ls]
command = "emmet-ls"
args = ["--stdio"]

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }

[language-server.eslint.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = false }

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[language-server.deno-lsp]
command = "deno"
args = ["lsp", "--unstable"]

[language-server.deno-lsp.config.deno]
enable = true
unstable = true
lint = true
suggest.imports.hosts = { "https://deno.land" = true }
inlayHints.parameterNames.enabled = "all"
inlayHints.parameterTypes.enabled = true
inlayHints.variableTypes.enabled = true
inlayHints.propertyDeclarationTypes.enabled = true
inlayHints.functionLikeReturnTypes.enabled = true
inlayHints.enumMemberValues.enabled = true

[[language]]
name = "javascript"
language-id = "javascript"
scope = "source.js"
injection-regex = "^(js|javascript)$"
file-types = ["js", "jsx", "mjs"]
shebangs = ["deno", "node"]
roots = ["deno.json", "deno.jsonc", "package.json", "tsconfig.json"]
comment-token = "//"
language-servers = [
<<<<<<< Updated upstream
  # { name = "deno-lsp", except-features = ["diagnostics"] },
=======
>>>>>>> Stashed changes
  # "deno-lsp",
  "typescript-language-server",
  "eslint",
  { name = "emmet-ls", except-features = ["code-action"] },
]
indent = { tab-width = 2, unit = "  " }
formatter = { command = "deno", args = ["fmt", "-", "--ext", "js"] }
auto-format = true

[[language]]
name = "jsx"
language-id = "javascriptreact"
scope = "source.jsx"
injection-regex = "jsx"
file-types = ["jsx"]
shebangs = ["deno", "node"]
roots = ["deno.json", "deno.jsonc", "package.json", "tsconfig.json"]
comment-token = "//"
language-servers = [
<<<<<<< Updated upstream
  # { name = "deno-lsp", except-features = ["diagnostics"] },
  #"deno-lsp", 
  "typescript-language-server",
  "eslint",
  { name = "emmet-ls", except-features = ["code-action"] },
  "tailwindcss-ls",
=======
  # "deno-lsp", 
  "eslint", 
  "emmet-ls", 
  "tailwindcss-ls"
>>>>>>> Stashed changes
]
indent = { tab-width = 2, unit = "  " }
formatter = { command = "deno", args = ["fmt", "-", "--ext", "jsx"] }
auto-format = true

[[language]]
name = "typescript"
language-id = "typescript"
scope = "source.ts"
injection-regex = "^(ts|typescript)$"
file-types = ["ts"]
shebangs = ["deno", "node"]
roots = ["deno.json", "deno.jsonc", "package.json", "tsconfig.json"]
comment-token = "//"
language-servers = [
  # "deno-lsp",
  "typescript-language-server",
  "eslint",
  "emmet-ls",
]
indent = { tab-width = 2, unit = "  " }
formatter = { command = "deno", args = ["fmt", "-", "--ext", "ts"] }
auto-format = true

[[language]]
name = "tsx"
language-id = "typescriptreact"
scope = "source.tsx"
injection-regex = "^(tsx)$"
file-types = ["tsx"]
shebangs = ["deno", "node"]
roots = ["deno.json", "deno.jsonc", "package.json", "tsconfig.json"]
comment-token = "//"
language-servers = [
  #"deno-lsp", 
<<<<<<< Updated upstream
  "typescript-language-server",
  "eslint",
  "emmet-ls",
  "tailwindcss-ls",
=======
  "eslint", 
  "emmet-ls", 
  "tailwindcss-ls"
>>>>>>> Stashed changes
]
indent = { tab-width = 2, unit = "  " }
formatter = { command = "deno", args = ["fmt", "-", "--ext", "tsx"] }
auto-format = true

[[language]]
name = "json"
file-types = ["json"]
formatter = { command = "deno", args = ["fmt", "--ext", "json", "-"] }
indent = { tab-width = 2, unit = "  " }
auto-format = true

[[language]]
name = "jsonc"
file-types = ["jsonc"]
formatter = { command = "deno", args = ["fmt", "--ext", "jsonc", "-"] }
indent = { tab-width = 2, unit = "  " }
auto-format = true

[[language]]
name = "html"
language-servers = ["vscode-html-language-server", "emmet-ls", "tailwindcss-ls"]
formatter = { command = 'prettier', args = ["--parser", "html"] }
indent = { tab-width = 2, unit = "  " }
auto-format = true

[[language]]
name = "css"
language-servers = ["vscode-css-language-server", "emmet-ls", "tailwindcss-ls"]
formatter = { command = 'prettier', args = ["--parser", "css"] }
indent = { tab-width = 2, unit = "  " }
auto-format = true

[language-server.sql-language-server]
command = "sql-language-server"
args = ["up", "--method", "stdio"]
[[language]]
name = "sql"
language-servers = ["sql-language-server"]
auto-format = true
file-types = ["sql"]
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "toml"
auto-format = true
formatter = { command = "taplo", args = ["fmt", "-"] }
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "yaml"
auto-format = true

[language-server.ltex]
command = "ltex-ls"
[language-server.ltex.config.ltex.dictionary]
"en-US" = ["ewwe","flaberrasted"]

[[language]]
name = "markdown"
file-types = ["md"]
language-servers = [ "marksman", "ltex-ls" ]
formatter = { command = "deno", args = ["fmt", "--ext", "md", "-"] }
# formatter = { command = "dprint", args = ["fmt", "--stdin", "markdown"] }
indent = { tab-width = 2, unit = "  " }
auto-format = true

# [[language]]
# name = "plaintext"
# language-servers = { command = "ltex-ls" }

[[language]]
name = "bash"
formatter = { command = 'shfmt', args = ["-i", "4"] }
auto-format = true
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "dockerfile"
auto-format = true
formatter = { command = "dprint", args = ["fmt", "--stdin", "dockerfile"] }
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "lua"
auto-format = true
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "fish"
formatter = { command = "fish_indent" }
auto-format = true

[[language]]
name = "wgsl"
auto-format = true
indent = { tab-width = 4, unit = "    " }

[language-server.godot]
command = "nc"
args = ["127.0.0.1", "6005"]
[[language]]
name = "gdscript"
language-servers = ["godot"]
auto-format = true
file-types = ["gd"]
formatter = { command = "gdformat" }
